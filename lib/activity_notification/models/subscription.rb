module ActivityNotification
  # Subscription model implementation generated by ActivityNotification.
  class Subscription < ActiveRecord::Base
    include SubscriptionApi
    self.table_name = ActivityNotification.config.subscription_table_name

    # Belongs to target instance of this subscription as polymorphic association.
    # @scope instance
    # @return [Object] Target instance of this subscription
    belongs_to :target,               polymorphic: true

    # Serialize parameters Hash
    serialize  :parameters, Hash

    validates  :target,               presence: true
    validates  :key,                  presence: true
    validates_inclusion_of :subscribing,          in: [true, false]
    validates_inclusion_of :subscribing_to_email, in: [true, false]
    validate   :subscribing_to_email_cannot_be_true_when_subscribing_is_false
    validates  :subscribed_at,            presence: true, if:     :subscribing
    validates  :unsubscribed_at,          presence: true, unless: :subscribing
    validates  :subscribed_to_email_at,   presence: true, if:     :subscribing_to_email
    validates  :unsubscribed_to_email_at, presence: true, unless: :subscribing_to_email

    # Selects filtered subscriptions by target instance.
    #   ActivityNotification::Subscription.filtered_by_target(@user)
    # is the same as
    #   @user.subscriptions
    # @scope class
    # @param [Object] target Target instance for filter
    # @return [ActiveRecord_AssociationRelation<Subscription>] Array or database query of filtered subscriptions
    scope :filtered_by_target,  ->(target)       { where(target: target) }

    # Selects filtered subscriptions by key.
    # @example Get filtered subscriptions of the @user with key 'comment.reply'
    #   @subscriptions = @user.subscriptions.filtered_by_key('comment.reply')
    # @scope class
    # @param [String] key Key of the subscription for filter
    # @return [ActiveRecord_AssociationRelation<Subscription>] Array or database query of filtered subscriptions
    scope :filtered_by_key,     ->(key)          { where(key: key) }

    # Selects filtered subscriptions by key with filter options.
    # @example Get filtered subscriptions of the @user with key 'comment.reply'
    #   @subscriptions = @user.subscriptions.filtered_by_key('comment.reply')
    # @example Get custom filtered subscriptions of the @user
    #   @subscriptions = @user.subscriptions.filtered_by_options({ custom_filter: ["created_at >= ?", time.hour.ago] })
    # @scope class
    # @param [Hash] options Options for filter
    # @option options [String]     :filtered_by_key        (nil) Key of the subscription for filter 
    # @option options [Array|Hash] :custom_filter          (nil) Custom subscription filter (e.g. ["created_at >= ?", time.hour.ago])
    # @return [ActiveRecord_AssociationRelation<Notificaion>] Array or database query of filtered subscriptions
    scope :filtered_by_options, ->(options = {}) {
      options = ActivityNotification.cast_to_indifferent_hash(options)
      filtered_subscriptions = all
      if options.has_key?(:filtered_by_key)
        filtered_subscriptions = filtered_subscriptions.filtered_by_key(options[:filtered_by_key])
      end
      if options.has_key?(:custom_filter)
        filtered_subscriptions = filtered_subscriptions.where(options[:custom_filter])
      end
      filtered_subscriptions
    }

    # Orders by latest (newest) first as created_at: :desc.
    # @return [ActiveRecord_AssociationRelation<Subscription>] Database query of subscriptions ordered by latest first
    scope :latest_order,              -> { order(created_at: :desc) }

    # Orders by earliest (older) first as created_at: :asc.
    # @return [ActiveRecord_AssociationRelation<Subscription>] Database query of subscriptions ordered by earliest first
    scope :earliest_order,            -> { order(created_at: :asc) }

    # Orders by latest (newest) first as subscribed_at: :desc.
    # @return [ActiveRecord_AssociationRelation<Subscription>] Database query of subscriptions ordered by latest subscribed_at first
    scope :latest_subscribed_order,   -> { order(subscribed_at: :desc) }

    # Orders by earliest (older) first as subscribed_at: :asc.
    # @return [ActiveRecord_AssociationRelation<Subscription>] Database query of subscriptions ordered by earliest subscribed_at first
    scope :earliest_subscribed_order, -> { order(subscribed_at: :asc) }

    # Orders by key name as key: :asc.
    # @return [ActiveRecord_AssociationRelation<Subscription>] Database query of subscriptions ordered by key name
    scope :key_order,                 -> { order(key: :asc) }

#    private
      # Validates subscribing_to_email cannot be true when subscribing isfalse.
      def subscribing_to_email_cannot_be_true_when_subscribing_is_false
        if !subscribing && subscribing_to_email
          errors.add(:subscribing_to_email, "cannot be true when subscribing is false")
        end
      end

  end
end
